// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.1
// source: attendance.proto

package protoc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LeaveServiceClient is the client API for LeaveService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LeaveServiceClient interface {
	PostAttendance(ctx context.Context, in *Attendance, opts ...grpc.CallOption) (*AttendanceResponse, error)
}

type leaveServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLeaveServiceClient(cc grpc.ClientConnInterface) LeaveServiceClient {
	return &leaveServiceClient{cc}
}

func (c *leaveServiceClient) PostAttendance(ctx context.Context, in *Attendance, opts ...grpc.CallOption) (*AttendanceResponse, error) {
	out := new(AttendanceResponse)
	err := c.cc.Invoke(ctx, "/attendance.LeaveService/PostAttendance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeaveServiceServer is the server API for LeaveService service.
// All implementations must embed UnimplementedLeaveServiceServer
// for forward compatibility
type LeaveServiceServer interface {
	PostAttendance(context.Context, *Attendance) (*AttendanceResponse, error)
	mustEmbedUnimplementedLeaveServiceServer()
}

// UnimplementedLeaveServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLeaveServiceServer struct {
}

func (UnimplementedLeaveServiceServer) PostAttendance(context.Context, *Attendance) (*AttendanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostAttendance not implemented")
}
func (UnimplementedLeaveServiceServer) mustEmbedUnimplementedLeaveServiceServer() {}

// UnsafeLeaveServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LeaveServiceServer will
// result in compilation errors.
type UnsafeLeaveServiceServer interface {
	mustEmbedUnimplementedLeaveServiceServer()
}

func RegisterLeaveServiceServer(s grpc.ServiceRegistrar, srv LeaveServiceServer) {
	s.RegisterService(&LeaveService_ServiceDesc, srv)
}

func _LeaveService_PostAttendance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Attendance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaveServiceServer).PostAttendance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/attendance.LeaveService/PostAttendance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaveServiceServer).PostAttendance(ctx, req.(*Attendance))
	}
	return interceptor(ctx, in, info, handler)
}

// LeaveService_ServiceDesc is the grpc.ServiceDesc for LeaveService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LeaveService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "attendance.LeaveService",
	HandlerType: (*LeaveServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostAttendance",
			Handler:    _LeaveService_PostAttendance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "attendance.proto",
}
