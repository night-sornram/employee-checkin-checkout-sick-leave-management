// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	repository "github.com/night-sornram/employee-management/attendance-service/repository"
	mock "github.com/stretchr/testify/mock"
)

// AttendanceService is an autogenerated mock type for the AttendanceService type
type AttendanceService struct {
	mock.Mock
}

// CheckIn provides a mock function with given fields: eid
func (_m *AttendanceService) CheckIn(eid string) (repository.Attendance, error) {
	ret := _m.Called(eid)

	if len(ret) == 0 {
		panic("no return value specified for CheckIn")
	}

	var r0 repository.Attendance
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (repository.Attendance, error)); ok {
		return rf(eid)
	}
	if rf, ok := ret.Get(0).(func(string) repository.Attendance); ok {
		r0 = rf(eid)
	} else {
		r0 = ret.Get(0).(repository.Attendance)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(eid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckOut provides a mock function with given fields: id
func (_m *AttendanceService) CheckOut(id int) (repository.Attendance, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for CheckOut")
	}

	var r0 repository.Attendance
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (repository.Attendance, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) repository.Attendance); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(repository.Attendance)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckToday provides a mock function with given fields: eid
func (_m *AttendanceService) CheckToday(eid string) (repository.Attendance, error) {
	ret := _m.Called(eid)

	if len(ret) == 0 {
		panic("no return value specified for CheckToday")
	}

	var r0 repository.Attendance
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (repository.Attendance, error)); ok {
		return rf(eid)
	}
	if rf, ok := ret.Get(0).(func(string) repository.Attendance); ok {
		r0 = rf(eid)
	} else {
		r0 = ret.Get(0).(repository.Attendance)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(eid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAttendance provides a mock function with given fields: attendance
func (_m *AttendanceService) CreateAttendance(attendance repository.Attendance) (repository.Attendance, error) {
	ret := _m.Called(attendance)

	if len(ret) == 0 {
		panic("no return value specified for CreateAttendance")
	}

	var r0 repository.Attendance
	var r1 error
	if rf, ok := ret.Get(0).(func(repository.Attendance) (repository.Attendance, error)); ok {
		return rf(attendance)
	}
	if rf, ok := ret.Get(0).(func(repository.Attendance) repository.Attendance); ok {
		r0 = rf(attendance)
	} else {
		r0 = ret.Get(0).(repository.Attendance)
	}

	if rf, ok := ret.Get(1).(func(repository.Attendance) error); ok {
		r1 = rf(attendance)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAttendance provides a mock function with given fields: id
func (_m *AttendanceService) DeleteAttendance(id int) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAttendance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DownloadCSV provides a mock function with given fields: query
func (_m *AttendanceService) DownloadCSV(query string) ([]byte, error) {
	ret := _m.Called(query)

	if len(ret) == 0 {
		panic("no return value specified for DownloadCSV")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(query)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllLate provides a mock function with given fields:
func (_m *AttendanceService) GetAllLate() ([]repository.Attendance, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllLate")
	}

	var r0 []repository.Attendance
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]repository.Attendance, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []repository.Attendance); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.Attendance)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAttendance provides a mock function with given fields: id
func (_m *AttendanceService) GetAttendance(id int) (repository.Attendance, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetAttendance")
	}

	var r0 repository.Attendance
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (repository.Attendance, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) repository.Attendance); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(repository.Attendance)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAttendances provides a mock function with given fields: query
func (_m *AttendanceService) GetAttendances(query repository.Query) (repository.DataJson, error) {
	ret := _m.Called(query)

	if len(ret) == 0 {
		panic("no return value specified for GetAttendances")
	}

	var r0 repository.DataJson
	var r1 error
	if rf, ok := ret.Get(0).(func(repository.Query) (repository.DataJson, error)); ok {
		return rf(query)
	}
	if rf, ok := ret.Get(0).(func(repository.Query) repository.DataJson); ok {
		r0 = rf(query)
	} else {
		r0 = ret.Get(0).(repository.DataJson)
	}

	if rf, ok := ret.Get(1).(func(repository.Query) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDayLate provides a mock function with given fields:
func (_m *AttendanceService) GetDayLate() ([]repository.Attendance, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDayLate")
	}

	var r0 []repository.Attendance
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]repository.Attendance, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []repository.Attendance); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.Attendance)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMonthLate provides a mock function with given fields: date
func (_m *AttendanceService) GetMonthLate(date repository.GetMonth) ([]repository.Attendance, error) {
	ret := _m.Called(date)

	if len(ret) == 0 {
		panic("no return value specified for GetMonthLate")
	}

	var r0 []repository.Attendance
	var r1 error
	if rf, ok := ret.Get(0).(func(repository.GetMonth) ([]repository.Attendance, error)); ok {
		return rf(date)
	}
	if rf, ok := ret.Get(0).(func(repository.GetMonth) []repository.Attendance); ok {
		r0 = rf(date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.Attendance)
		}
	}

	if rf, ok := ret.Get(1).(func(repository.GetMonth) error); ok {
		r1 = rf(date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMyAttendances provides a mock function with given fields: query, eid
func (_m *AttendanceService) GetMyAttendances(query repository.Query, eid string) (repository.DataJson, error) {
	ret := _m.Called(query, eid)

	if len(ret) == 0 {
		panic("no return value specified for GetMyAttendances")
	}

	var r0 repository.DataJson
	var r1 error
	if rf, ok := ret.Get(0).(func(repository.Query, string) (repository.DataJson, error)); ok {
		return rf(query, eid)
	}
	if rf, ok := ret.Get(0).(func(repository.Query, string) repository.DataJson); ok {
		r0 = rf(query, eid)
	} else {
		r0 = ret.Get(0).(repository.DataJson)
	}

	if rf, ok := ret.Get(1).(func(repository.Query, string) error); ok {
		r1 = rf(query, eid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetYearLate provides a mock function with given fields: year
func (_m *AttendanceService) GetYearLate(year int) ([]repository.Attendance, error) {
	ret := _m.Called(year)

	if len(ret) == 0 {
		panic("no return value specified for GetYearLate")
	}

	var r0 []repository.Attendance
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]repository.Attendance, error)); ok {
		return rf(year)
	}
	if rf, ok := ret.Get(0).(func(int) []repository.Attendance); ok {
		r0 = rf(year)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.Attendance)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(year)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAttendance provides a mock function with given fields: id, attendance
func (_m *AttendanceService) UpdateAttendance(id int, attendance repository.Attendance) (repository.Attendance, error) {
	ret := _m.Called(id, attendance)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAttendance")
	}

	var r0 repository.Attendance
	var r1 error
	if rf, ok := ret.Get(0).(func(int, repository.Attendance) (repository.Attendance, error)); ok {
		return rf(id, attendance)
	}
	if rf, ok := ret.Get(0).(func(int, repository.Attendance) repository.Attendance); ok {
		r0 = rf(id, attendance)
	} else {
		r0 = ret.Get(0).(repository.Attendance)
	}

	if rf, ok := ret.Get(1).(func(int, repository.Attendance) error); ok {
		r1 = rf(id, attendance)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAttendanceService creates a new instance of AttendanceService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAttendanceService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AttendanceService {
	mock := &AttendanceService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
