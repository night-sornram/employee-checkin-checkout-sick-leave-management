// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	repository "github.com/night-sornram/employee-management/notification-service/repository"
	mock "github.com/stretchr/testify/mock"
)

// NotificationService is an autogenerated mock type for the NotificationService type
type NotificationService struct {
	mock.Mock
}

// CreateNotification provides a mock function with given fields: Notification
func (_m *NotificationService) CreateNotification(Notification repository.Notification) (repository.Notification, error) {
	ret := _m.Called(Notification)

	if len(ret) == 0 {
		panic("no return value specified for CreateNotification")
	}

	var r0 repository.Notification
	var r1 error
	if rf, ok := ret.Get(0).(func(repository.Notification) (repository.Notification, error)); ok {
		return rf(Notification)
	}
	if rf, ok := ret.Get(0).(func(repository.Notification) repository.Notification); ok {
		r0 = rf(Notification)
	} else {
		r0 = ret.Get(0).(repository.Notification)
	}

	if rf, ok := ret.Get(1).(func(repository.Notification) error); ok {
		r1 = rf(Notification)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNotification provides a mock function with given fields: id
func (_m *NotificationService) DeleteNotification(id int) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNotification")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetNotification provides a mock function with given fields: id
func (_m *NotificationService) GetNotification(id int) (repository.Notification, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetNotification")
	}

	var r0 repository.Notification
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (repository.Notification, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) repository.Notification); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(repository.Notification)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNotificationByEmployeeID provides a mock function with given fields: employeeID
func (_m *NotificationService) GetNotificationByEmployeeID(employeeID string) ([]repository.Notification, error) {
	ret := _m.Called(employeeID)

	if len(ret) == 0 {
		panic("no return value specified for GetNotificationByEmployeeID")
	}

	var r0 []repository.Notification
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]repository.Notification, error)); ok {
		return rf(employeeID)
	}
	if rf, ok := ret.Get(0).(func(string) []repository.Notification); ok {
		r0 = rf(employeeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.Notification)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(employeeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNotifications provides a mock function with given fields:
func (_m *NotificationService) GetNotifications() ([]repository.Notification, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNotifications")
	}

	var r0 []repository.Notification
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]repository.Notification, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []repository.Notification); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.Notification)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadNotification provides a mock function with given fields: id
func (_m *NotificationService) ReadNotification(id int) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for ReadNotification")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateNotification provides a mock function with given fields: id, Notification
func (_m *NotificationService) UpdateNotification(id int, Notification repository.Notification) (repository.Notification, error) {
	ret := _m.Called(id, Notification)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNotification")
	}

	var r0 repository.Notification
	var r1 error
	if rf, ok := ret.Get(0).(func(int, repository.Notification) (repository.Notification, error)); ok {
		return rf(id, Notification)
	}
	if rf, ok := ret.Get(0).(func(int, repository.Notification) repository.Notification); ok {
		r0 = rf(id, Notification)
	} else {
		r0 = ret.Get(0).(repository.Notification)
	}

	if rf, ok := ret.Get(1).(func(int, repository.Notification) error); ok {
		r1 = rf(id, Notification)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewNotificationService creates a new instance of NotificationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNotificationService(t interface {
	mock.TestingT
	Cleanup(func())
}) *NotificationService {
	mock := &NotificationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
