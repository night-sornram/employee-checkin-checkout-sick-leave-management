// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	repository "github.com/night-sornram/employee-management/notification-service/repository"
	mock "github.com/stretchr/testify/mock"
)

// NotificationRepository is an autogenerated mock type for the NotificationRepository type
type NotificationRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: Notification
func (_m *NotificationRepository) Create(Notification repository.Notification) (repository.Notification, error) {
	ret := _m.Called(Notification)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 repository.Notification
	var r1 error
	if rf, ok := ret.Get(0).(func(repository.Notification) (repository.Notification, error)); ok {
		return rf(Notification)
	}
	if rf, ok := ret.Get(0).(func(repository.Notification) repository.Notification); ok {
		r0 = rf(Notification)
	} else {
		r0 = ret.Get(0).(repository.Notification)
	}

	if rf, ok := ret.Get(1).(func(repository.Notification) error); ok {
		r1 = rf(Notification)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *NotificationRepository) Delete(id int) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *NotificationRepository) GetAll() ([]repository.Notification, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []repository.Notification
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]repository.Notification, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []repository.Notification); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.Notification)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByEmployeeID provides a mock function with given fields: employeeID
func (_m *NotificationRepository) GetByEmployeeID(employeeID string) ([]repository.Notification, error) {
	ret := _m.Called(employeeID)

	if len(ret) == 0 {
		panic("no return value specified for GetByEmployeeID")
	}

	var r0 []repository.Notification
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]repository.Notification, error)); ok {
		return rf(employeeID)
	}
	if rf, ok := ret.Get(0).(func(string) []repository.Notification); ok {
		r0 = rf(employeeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.Notification)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(employeeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *NotificationRepository) GetByID(id int) (repository.Notification, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 repository.Notification
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (repository.Notification, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) repository.Notification); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(repository.Notification)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Read provides a mock function with given fields: id
func (_m *NotificationRepository) Read(id int) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: id, Notification
func (_m *NotificationRepository) Update(id int, Notification repository.Notification) (repository.Notification, error) {
	ret := _m.Called(id, Notification)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 repository.Notification
	var r1 error
	if rf, ok := ret.Get(0).(func(int, repository.Notification) (repository.Notification, error)); ok {
		return rf(id, Notification)
	}
	if rf, ok := ret.Get(0).(func(int, repository.Notification) repository.Notification); ok {
		r0 = rf(id, Notification)
	} else {
		r0 = ret.Get(0).(repository.Notification)
	}

	if rf, ok := ret.Get(1).(func(int, repository.Notification) error); ok {
		r1 = rf(id, Notification)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewNotificationRepository creates a new instance of NotificationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNotificationRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *NotificationRepository {
	mock := &NotificationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
